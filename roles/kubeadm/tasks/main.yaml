--- # ---------------------------------------------------------
# ---------------------------------------------------------
# Add package repos
- name: Install k8s APT repo GPG key
  apt_key:
    url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
    state: present

- name: Setup k8s APT repo
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present

# ---------------------------------------------------------
# Check installed package versions
# ---------------------------------------------------------

- name: Set packages and their desired versions to be installed
  set_fact:
    desired_package_versions:
      docker.io: "{{ docker_version }}"
      kubelet: "{{ kubernetes_ubuntu_version }}"
      kubeadm: "{{ kubernetes_ubuntu_version }}"
      kubectl: "{{ kubernetes_ubuntu_version }}"
      kubernetes-cni: "{{ kubernetes_cni_ubuntu_version }}"

- name: Gather apt package facts
  package_facts:
    manager: apt

- name: Populate versions (for installed packages)
  set_fact:
    installed_versions: "{{ installed_versions|default({}) | combine( {item.key: ansible_facts.packages[item.key][0].version} ) }}"
  when: "item.key in ansible_facts.packages"
  loop: "{{ lookup('dict', desired_package_versions) }}"

- name: Populate versions (for missing packages)
  set_fact:
    installed_versions: "{{ installed_versions|default({}) | combine( {item.key: '__not__installed__'} ) }}"
  when: "item.key not in ansible_facts.packages"
  loop: "{{ lookup('dict', desired_package_versions) }}"

- name: Get packages on hold
  command: apt-mark showhold
  register: packages_on_hold
  changed_when: false # This doesn't influence idempotency

# Unhold and install correct version
- name: Unholding packages that require change (install or change version)
  command: "apt-mark unhold {{ item.key }}"
  # versions do not match, item.key = package name, item.value = current version, desired_package_versions[item.key] = desired version
  when: "item.value != desired_package_versions[item.key]"
  loop: "{{ lookup('dict', installed_versions) }}"

- name: Compile a list of "name=version" tuples to be installed
  set_fact:
    apt_install_list: "{{ (apt_install_list | default([])) + [item.key + '=' +  desired_package_versions[item.key]] }}"
  when: "item.value != desired_package_versions[item.key]"
  loop: "{{ lookup('dict', installed_versions) }}"

- name: Packages to be installed
  debug:
    var: apt_install_list
  when: apt_install_list is defined

- name: Installing packages that require change (install or change version)
  apt:
    name: "{{ apt_install_list }}"
    state: present
    only_upgrade: no
    force: true
    update_cache: yes
  # versions do not match, item.key = package name, item.value = current version, desired_package_versions[item.key] = desired version
  when: apt_install_list is defined

- name: Holding packages that required change (install or change version)
  command: "apt-mark hold {{ item.key }}"
  # versions didn't match or package hasn't been on hold yet
  when: "item.value != desired_package_versions[item.key] or item.key not in packages_on_hold.stdout_lines"
  loop: "{{ lookup('dict', installed_versions) }}"

# ---------------------------------------------------------
# Configure docker.io
# ---------------------------------------------------------

- name: Enable docker service
  systemd:
    name: docker
    enabled: yes
    daemon_reload: yes

- name: configure docker to use journald
  copy:
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2",
        "storage-opts": [
          "overlay2.override_kernel_check=true"
        ]
      }
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
  notify:
    - Restart docker

# ---------------------------------------------------------
# Add hostnames to /etc/hosts
# ---------------------------------------------------------

- name: add hosts
  lineinfile:
    dest: "/etc/hosts"
    regexp: ".*{{ hostvars[item].ansible_hostname }}$"
    line: "{{ hostvars[item].ansible_default_ipv4.address }} {{ hostvars[item].ansible_hostname }}"
    state: present
  when: hostvars[item].ansible_hostname is defined
  with_items: "{{groups['all'] | default([])}}"

# ---------------------------------------------------------
# OpenStack cloud configuration
# ---------------------------------------------------------

- name: Create OpenStack cloud configuration
  template:
    src: files/cloud-config.j2
    dest: /etc/kubernetes/cloud-config
    mode: 0600

- name: Override default kubeadm configuration to use the OpenStack cloud configuration
  copy:
    src: files/10-kubeadm.conf
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    mode: 0600
  notify:
    - Restart kubelet

# ---------------------------------------------------------
# Ensure all prerequisites are met
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
# ---------------------------------------------------------

# TODO: load module br_netfilter

- name: Let iptables see bridged traffic
  copy:
    dest: /etc/sysctl.d/k8s.conf
    owner: root
    group: root
    mode: 0644
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1

- name: Let iptables see bridged traffic (load settings from all system configuration files)
  command: "sysctl --system"
